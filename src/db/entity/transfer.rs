//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use super::sea_orm_active_enums::TransferStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "transfer")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub reference_key: String,
    pub payment_id: i32,
    pub signature: Option<String>,
    pub status: TransferStatus,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::payment::Entity",
        from = "Column::PaymentId",
        to = "super::payment::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Payment,
}

impl Related<super::payment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Payment.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
